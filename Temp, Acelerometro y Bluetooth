#include <Arduino.h>
#include <Adafruit_MPU6050.h>
#include <Adafruit_Sensor.h>
#include <Wire.h>

// Leds
#define ledRojo 26
#define ledAmarillo 25
#define ledVerde 33

//Sensor Temperatura pin
#define temp 36

// Canales PWM
#define canalPWMRojo 8
#define canalPWMVerde 7
#define canalPWMAmarillo 6

// Frecuencia PWM
#define freqPWM 50

// Resoluci贸n (bits)
#define resPWM 10

// Creaci贸n de funciones PWM y ADC
void initPWMServo(void);
void initPWMRojo(void);
void initPWMAmarillo(void);
void initPWMVerde(void);

// Variables utilizada para lectura de temperatura
float tempLectura = 0.0;
float tempConversion = 0.0;
float temp_final = 0.0;

Adafruit_MPU6050 mpu;

void setup() {
  // Comenzar comunicaci贸n Serial
  Serial.begin(115200);

  // Inicializaci贸n funciones PWM
  initPWMAmarillo();
  initPWMRojo();
  initPWMVerde();

  while (!Serial)
    delay(10); // will pause Zero, Leonardo, etc until serial console opens

  Serial.println("Adafruit MPU6050 test!");

  // Try to initialize!
  if (!mpu.begin()) {
    Serial.println("Failed to find MPU6050 chip");
    while (1) {
      delay(10);
    }
  }
  Serial.println("MPU6050 Found!");

  //setupt motion detection
  mpu.setHighPassFilter(MPU6050_HIGHPASS_0_63_HZ);
  mpu.setMotionDetectionThreshold(1);
  mpu.setMotionDetectionDuration(20);
  mpu.setInterruptPinLatch(true);	// Keep it latched.  Will turn off when reinitialized.
  mpu.setInterruptPinPolarity(true);
  mpu.setMotionInterrupt(true);

  Serial.println("");
  delay(100);
}

void loop() {
  // lectura de temperatura
  tempLectura = analogRead(temp);

  //Codigo para hacer lectura con potenciometro simulando valores
  //temp_final = map(tempLectura, 0, 4095, 30.0, 40.0);

  //codigo para uso de sensor temperatura
  //conversion de lectura de mV a grados celsius
  tempConversion = ((tempLectura * 3.3)/4095.0);
  temp_final = tempConversion * 100.0;

  if (temp_final > 37.5)
  {
    ledcWrite(canalPWMRojo, 1023);
    ledcWrite(canalPWMAmarillo, 0);
    ledcWrite(canalPWMVerde, 0);
  }
  else if (temp_final <= 37.5 && temp_final >= 37.0)
  {
    ledcWrite(canalPWMRojo, 0);
    ledcWrite(canalPWMAmarillo, 1023);
    ledcWrite(canalPWMVerde, 0);
  }
  else
  {
    ledcWrite(canalPWMRojo, 0);
    ledcWrite(canalPWMAmarillo, 0);
    ledcWrite(canalPWMVerde, 1023);
  }
}

//funcion PWM led rojo
void initPWMRojo(void)
{
  ledcSetup(canalPWMRojo, freqPWM, resPWM);
  ledcAttachPin(ledRojo, canalPWMRojo);
}

//funcion PWM led verde
void initPWMVerde(void)
{
  ledcSetup(canalPWMVerde, freqPWM, resPWM);
  ledcAttachPin(ledVerde, canalPWMVerde);
}

//funcion PWM Led amarillo
void initPWMAmarillo(void)
{
  ledcSetup(canalPWMAmarillo, freqPWM, resPWM);
  ledcAttachPin(ledAmarillo, canalPWMAmarillo);
}
