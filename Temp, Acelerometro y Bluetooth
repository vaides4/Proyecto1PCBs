#include <Arduino.h>
#include <Adafruit_MPU6050.h>
#include <Adafruit_Sensor.h>
#include <Wire.h>

// Leds
#define ledRojo 26
#define ledAmarillo 25
#define ledVerde 33

//Sensor Temperatura pin
#define temp 36

// Canales PWM
#define canalPWMRojo 8
#define canalPWMVerde 7
#define canalPWMAmarillo 6

// Frecuencia PWM
#define freqPWM 50

// Resolución (bits)
#define resPWM 10

// Creación de funciones PWM y ADC
void initPWMServo(void);
void initPWMRojo(void);
void initPWMAmarillo(void);
void initPWMVerde(void);

// Variables utilizada para lectura de temperatura
float tempLectura = 0.0;
float tempConversion = 0.0;
float temp_final = 0.0;

Adafruit_MPU6050 mpu;

//Contador para cantidad de pasos
int stepCount = 0;
//Float donde se guardara la magnitud previa
float prevMagnitude = 0;
unsigned long lastStepTime = 0;
const float stepThreshold = 1.3;

// interrupciones
portMUX_TYPE mux = portMUX_INITIALIZER_UNLOCKED;

// Interrupción contador
struct Boton1
{
  const uint8_t boton1;
  bool pressed;
  bool lastState;
};
Boton1 BOT1 = {32, false, false};

// variables de handle interrupcion
void IRAM_ATTR handle_boton()
{
  portENTER_CRITICAL_ISR(&mux);
  BOT1.pressed = true;
  portEXIT_CRITICAL_ISR(&mux);
}

void setup() {
  // Comenzar comunicación Serial
  Serial.begin(115200);

  // Inicialización funciones PWM
  initPWMAmarillo();
  initPWMRojo();
  initPWMVerde();

  while (!Serial){
    delay(10); // will pause Zero, Leonardo, etc until serial console opens
  }  
  Serial.println("Adafruit MPU6050 test!");

  // Try to initialize!
  if (!mpu.begin()) {
    Serial.println("Failed to find MPU6050 chip");
    while (1) {
      delay(10);
    }
  }
  Serial.println("MPU6050 Found!");

  //setupt motion detection
  mpu.setHighPassFilter(MPU6050_HIGHPASS_0_63_HZ);
  mpu.setMotionDetectionThreshold(1);
  mpu.setMotionDetectionDuration(20);
  mpu.setInterruptPinLatch(true);	// Keep it latched.  Will turn off when reinitialized.
  mpu.setInterruptPinPolarity(true);
  mpu.setMotionInterrupt(true);

  // entradas botones
  pinMode(BOT1.boton1, INPUT_PULLUP);
  attachInterrupt(BOT1.boton1, handle_boton, RISING);

  Serial.println("");
  delay(100);
}

void loop() {
  // lectura de temperatura
  tempLectura = analogRead(temp);

  //Codigo para hacer lectura con potenciometro simulando valores
  //temp_final = map(tempLectura, 0, 4095, 30.0, 40.0);

  //codigo para uso de sensor temperatura
  //conversion de lectura de mV a grados celsius
  tempConversion = ((tempLectura * 3.3)/4095.0);
  temp_final = tempConversion * 100.0;

  if (temp_final > 37.5){
    ledcWrite(canalPWMRojo, 1023);
    ledcWrite(canalPWMAmarillo, 0);
    ledcWrite(canalPWMVerde, 0);
  }

  else if (temp_final <= 37.5 && temp_final >= 37.0){
    ledcWrite(canalPWMRojo, 0);
    ledcWrite(canalPWMAmarillo, 1023);
    ledcWrite(canalPWMVerde, 0);
  }

  else{
    ledcWrite(canalPWMRojo, 0);
    ledcWrite(canalPWMAmarillo, 0);
    ledcWrite(canalPWMVerde, 1023);
  }

  if (mpu.getMotionInterruptStatus()) {
    sensors_event_t a, g, tempMPU;
    mpu.getEvent(&a, &g, &tempMPU);

    // Calcular magnitud de aceleración
    float magnitude = sqrt(a.acceleration.x * a.acceleration.x + 
                           a.acceleration.y * a.acceleration.y + 
                           a.acceleration.z * a.acceleration.z);

    // Detectar paso (cambio brusco en aceleración)
    if (abs(magnitude - prevMagnitude) > stepThreshold && millis() - lastStepTime > 300) {
        stepCount++;
        lastStepTime = millis();
        Serial.print("Paso detectado! Total: ");
        Serial.println(stepCount);
    }
    prevMagnitude = magnitude;
  }

  if (BOT1.pressed != BOT1.lastState)
  {
    if (BOT1.pressed)
    {
      stepCount == 0;
      BOT1.pressed = false;
    }
    BOT1.lastState = BOT1.pressed;
  }
}

//funcion PWM led rojo
void initPWMRojo(void)
{
  ledcSetup(canalPWMRojo, freqPWM, resPWM);
  ledcAttachPin(ledRojo, canalPWMRojo);
}

//funcion PWM led verde
void initPWMVerde(void)
{
  ledcSetup(canalPWMVerde, freqPWM, resPWM);
  ledcAttachPin(ledVerde, canalPWMVerde);
}

//funcion PWM Led amarillo
void initPWMAmarillo(void)
{
  ledcSetup(canalPWMAmarillo, freqPWM, resPWM);
  ledcAttachPin(ledAmarillo, canalPWMAmarillo);
}
